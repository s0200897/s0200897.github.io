{"version":3,"sources":["redux/reducers.js","redux/types.js","api/OpenWeatherMapApi.js","components/App.js","components/Forecast.js","components/ForecastDetailPage.js","components/Location.js","components/SetLocationPage.js","redux/actions.js","components/ForecastPage.js","index.js"],"names":["locationReducer","state","action","type","data","forecastReducer","isFetching","isInvalidate","error","items","lastUpdated","receivedAt","API_KEY","API_URI","API_UNIT","neddle","a","PARAM","url","fetch","response","json","list","console","polish5DaysForecast","forecastMap","map","F","index","day","dt_txt","tempMin","main","temp_min","tempMax","temp_max","conditions","weather","description","icon","wind","speed","reduce","key","substring","has","set","hourly","item","get","Math","min","max","substr","push","Map","values","locationID","result","dispatch","fetchLocations","fetch5DaysForecast","Forecast","inDetail","onClick","className","alt","src","ForecastDetailPage","date","forecastDetails","onClose","forecast","Location","location","coord","timeoutId","SetLocationPage","props","_setLocation","setLocation","fetchForecasts","locations","needle","clearTimeout","length","this","setState","setTimeout","api","name","sys","country","defaultValue","onChange","e","preventDefault","_refreshLocations","target","value","trim","autoFocus","id","lat","lon","Component","connect","ForecastPage","showForecastDetailPage","selectDateIndex","hideForecastDetailPage","showSetLocationPage","hideSetLocationPage","forecasts","detailForecast","Date","toLocaleString","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","then","now","catch","toString","fetchForecastsFailed","finally","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.00cd21c5.chunk.js","sourcesContent":["import {\n  SET_LOCATION,\n  FETCH_FORECASTS_REQUEST,\n  FETCH_FORECASTS_FAILURE,\n  FETCH_FORECASTS_SUCCESS,\n} from './types'\n\nconst locationReducer = (state, action) => {\n  switch (action.type) {\n    case SET_LOCATION:\n      return action.data\n    default:\n      return state\n  }\n}\n\nconst forecastReducer = (state = {}, action) => {\n  switch (action.type) {\n    case FETCH_FORECASTS_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n        isInvalidate: false,\n      }\n    case FETCH_FORECASTS_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        isInvalidate: false,\n        error: action.error,\n      }\n    case FETCH_FORECASTS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        isInvalidate: false,\n        items: action.data,\n        error: null,\n        lastUpdated: action.receivedAt,\n      }\n    default:\n      return state\n  }\n}\nexport const reducer = (state = {}, action) => {\n  return {\n    location: locationReducer(state.location, action),\n    forecasts: forecastReducer(state.forecasts, action),\n  }\n}\n","export const SET_LOCATION = 'SET_LOCATION'\nexport const FETCH_FORECASTS_REQUEST = 'FETCH_FORECASTS_REQUEST'\nexport const FETCH_FORECASTS_FAILURE = 'FETCH_FORECASTS_FAILURE'\nexport const FETCH_FORECASTS_SUCCESS = 'FETCH_FORECASTS_SUCCESS'\n","const API_KEY = '715ac60004286c422cbbbf1d407f9a12'\nconst API_URI = 'https://api.openweathermap.org/data/2.5'\nconst API_UNIT = 'metric'\nexport const API_ICON_URI = 'https://openweathermap.org/img/wn/'\n\nasync function fetchLocations(neddle) {\n  const PARAM = `type=like&sort=population&units=${API_UNIT}&cnt=7`\n  let url = `${API_URI}/find?q=${neddle}&${PARAM}&appid=${API_KEY}`\n  try {\n    const response = await fetch(url)\n    const json = await response.json()\n    // console.log(json)\n    return json.list\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nfunction polish5DaysForecast(data) {\n  if (!data) return\n  const forecast3hoursList = data.list.map(function(F, index) {\n    return {\n      day: F.dt_txt,\n      tempMin: F.main.temp_min,\n      tempMax: F.main.temp_max,\n      conditions: F.weather[0].description,\n      icon: F.weather[0].icon,\n      wind: F.wind.speed,\n    }\n  })\n\n  const forecastMap = forecast3hoursList.reduce(function(map, F) {\n    const key = F['day'].substring(0, 10)\n    if (!map.has(key)) {\n      map.set(key, { ...F, day: F['day'].substring(0, 10), hourly: [] })\n    }\n    const item = map.get(key)\n    item['tempMin'] = Math.min(item['tempMin'], F['tempMin'])\n    item['tempMax'] = Math.max(item['tempMax'], F['tempMax'])\n\n    F['day'] = F['day'].substr(11)\n    item.hourly.push(F)\n    return map\n  }, new Map())\n\n  return [...forecastMap.values()]\n}\n\nasync function fetch5DaysForecast(locationID) {\n  let url = `${API_URI}/forecast?id=${locationID}&units=${API_UNIT}&appid=${API_KEY}`\n  try {\n    const response = await fetch(url)\n    const result = await response.json()\n    // console.log(polish5DaysForecast(result))\n    return polish5DaysForecast(result)\n  } catch (error) {\n    console.error(error)\n    throw error\n  }\n}\n\nexport default { fetchLocations, fetch5DaysForecast }\n","import React from 'react'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { reducer } from '../redux/reducers'\nimport ForecastPage from './ForecastPage'\nimport {\n  fetchForecastsRequest,\n  fetchForecastsFailed,\n  fetchForecastsSuccess,\n} from '../redux/actions'\nimport api from '../api/OpenWeatherMapApi'\n// import mockData from '../MockData'\nimport './App.css'\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nconst App = () => (\n  <Provider store={store}>\n    <ForecastPage />\n  </Provider>\n)\n\nlet timeoutId = -1\n\nconst AUTO_REFRESH_THRESHOLD = 1000 * 60 * 1 // 10 minutes interval suggested by api doc\nconst _fetchForecasts = dispatch => {\n  return location => {\n    dispatch(fetchForecastsRequest())\n    clearTimeout(timeoutId)\n    api\n      .fetch5DaysForecast(location.id)\n      .then(json => dispatch(fetchForecastsSuccess(json)))\n      .catch(error => dispatch(fetchForecastsFailed(error)))\n      .finally(() => {\n        timeoutId = setTimeout(\n          () => fetchForecasts(location),\n          AUTO_REFRESH_THRESHOLD\n        )\n      })\n  }\n}\n\nexport const fetchForecasts = _fetchForecasts(store.dispatch)\n// fetchForecasts({ id: 2643743 })\nexport default App\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { API_ICON_URI } from '../api/OpenWeatherMapApi'\n\nconst Forecast = ({\n  inDetail = false,\n  day,\n  icon,\n  conditions,\n  tempMax,\n  tempMin,\n  wind,\n  onClick,\n}) => (\n  <li className=\"Forecast\" onClick={onClick}>\n    <span>\n      <img alt={icon} src={`${API_ICON_URI}/${icon}@2x.png`} />\n    </span>\n\n    <span>\n      <h4>\n        {day}, {conditions}\n      </h4>\n      temperature from {tempMin} to {tempMax} °С, wind {wind} m/s.\n      {!inDetail ? <p>( Click to see detail forecast )</p> : null}\n    </span>\n  </li>\n)\n\nForecast.propTypes = {\n  onClick: PropTypes.func,\n  day: PropTypes.string.isRequired,\n}\n\nexport default Forecast\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Forecast from './Forecast'\n\nconst ForecastDetailPage = ({ date, forecastDetails, onClose }) => (\n  <article className=\"ForecastDetailPage modal\">\n    <div className=\"modal-content\">\n      <span className=\"close\" onClick={onClose}>\n        &times;\n      </span>\n      <h1>3-hourly forecast ({date})</h1>\n      <ul>\n        {forecastDetails.map(forecast => (\n          <Forecast key={forecast.day} {...forecast} inDetail={true} />\n        ))}\n      </ul>\n    </div>\n  </article>\n)\n\nForecastDetailPage.propTypes = {\n  forecastDetails: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  date: PropTypes.string.isRequired,\n}\n\nexport default ForecastDetailPage\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { API_ICON_URI } from '../api/OpenWeatherMapApi'\n\nconst Location = ({ onClick, location, icon, coord }) => (\n  <li className=\"Location\" onClick={onClick}>\n    <span>\n      <h3>\n        <img alt={icon} src={`${API_ICON_URI}/${icon}.png`} />\n      </h3>\n    </span>\n    <span>\n      <h4>{location}</h4>\n      <h5 alt=\"Geo coords\">[{coord}]</h5>\n    </span>\n  </li>\n)\n\nLocation.propTypes = {\n  onClick: PropTypes.func,\n  location: PropTypes.string.isRequired,\n}\n\nexport default Location\n","import React, { Component } from 'react'\nimport Location from './Location'\nimport { connect } from 'react-redux'\nimport { setLocation } from '../redux/actions'\nimport api from '../api/OpenWeatherMapApi'\nimport { fetchForecasts } from './App'\n\nlet timeoutId = -1\nclass SetLocationPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { locations: [] }\n  }\n\n  _setLocation = location => {\n    this.props.setLocation(location)\n    if (!location) return\n    fetchForecasts(location)\n  }\n\n  _refreshLocations(needle) {\n    clearTimeout(timeoutId)\n    if (!needle && needle.length < 3) {\n      this.setState({ locations: [] })\n      return\n    }\n    timeoutId = setTimeout(async () => {\n      let locations = await api.fetchLocations(needle)\n      this.setState({ locations })\n    }, 230)\n  }\n\n  render() {\n    const location = this.props.location\n      ? this.props.location.name + ', ' + this.props.location.sys.country\n      : ''\n    return (\n      <article className=\"SetLocationPage modal\">\n        <div className=\"modal-content\">\n          <span className=\"close\" onClick={this.props.onClose}>\n            &times;\n          </span>\n          <h1>Set Location</h1>\n          <input\n            defaultValue={location}\n            onChange={e => {\n              e.preventDefault()\n              this._refreshLocations(e.target.value.trim())\n            }}\n            autoFocus={true}\n          ></input>\n          <ul>\n            {this.state.locations\n              ? this.state.locations.map(location => (\n                  <Location\n                    key={location.id}\n                    icon={location.weather[0].icon}\n                    location={location.name + ', ' + location.sys.country}\n                    coord={location.coord.lat + ', ' + location.coord.lon}\n                    onClick={() => {\n                      this._setLocation(location)\n                      this.props.onClose()\n                    }}\n                  />\n                ))\n              : null}\n          </ul>\n        </div>\n      </article>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLocation: location => dispatch(setLocation(location)),\n  }\n  // fetchForecasts: forecasts => dispatch(fetchForecasts(forecasts)),\n}\nconst mapStateToProps = state => {\n  return {\n    location: state.location,\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SetLocationPage)\n","import {\n  SET_LOCATION,\n  FETCH_FORECASTS_REQUEST,\n  FETCH_FORECASTS_FAILURE,\n  FETCH_FORECASTS_SUCCESS,\n} from './types'\n\nexport const setLocation = location => {\n  return { type: SET_LOCATION, data: location }\n}\n\nexport const fetchForecastsRequest = () => {\n  return { type: FETCH_FORECASTS_REQUEST }\n}\n\nexport const fetchForecastsFailed = error => {\n  return { type: FETCH_FORECASTS_FAILURE, error: error.toString() }\n}\nexport const fetchForecastsSuccess = forecasts => {\n  return {\n    type: FETCH_FORECASTS_SUCCESS,\n    data: forecasts,\n    receivedAt: Date.now,\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Forecast from './Forecast'\nimport ForecastDetailPage from './ForecastDetailPage'\nimport SetLocationPage from './SetLocationPage'\n\nclass ForecastPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showSetLocationPage: false,\n      showForecastDetailPage: false,\n      selectDateIndex: 0,\n    }\n  }\n\n  showForecastDetailPage = index => {\n    this.setState({ showForecastDetailPage: true, selectDateIndex: index })\n  }\n\n  hideForecastDetailPage = () => {\n    this.setState({ showForecastDetailPage: false })\n  }\n\n  showSetLocationPage = () => {\n    this.setState({ showSetLocationPage: true })\n  }\n\n  hideSetLocationPage = () => {\n    this.setState({ showSetLocationPage: false })\n  }\n\n  render() {\n    const forecasts = this.props.forecasts\n    const detailForecast = this.state.showForecastDetailPage\n      ? this.props.forecasts[this.state.selectDateIndex]\n      : null\n    return (\n      <div className=\"ForecastPage\">\n        <header>\n          <h1>Weather Forecast </h1>\n          <button onClick={this.showSetLocationPage}>\n            {this.props.location\n              ? this.props.location.name +\n                ', ' +\n                this.props.location.sys.country\n              : 'Set Location'}\n          </button>\n          <span className=\"refresh\">\n            {this.props.isFetching ? (\n              <img alt=\"loading\" src=\"/loading.gif\" />\n            ) : this.props.error ? (\n              <span className=\"error\">{this.props.error}</span>\n            ) : null}{' '}\n            last updated at{' '}\n            {Date(this.props.lastUpdated)\n              .toLocaleString()\n              .substring(16, 21)}\n          </span>\n        </header>\n        <h2>5-days forecast</h2>\n        <ul>\n          {forecasts ? (\n            forecasts.map((forecast, index) => (\n              <Forecast\n                key={forecast.day}\n                {...forecast}\n                onClick={() => {\n                  this.showForecastDetailPage(index)\n                }}\n              />\n            ))\n          ) : (\n            <div className=\"hero\">\n              <h4>Hi,</h4>\n              <div>\n                This is a weather forecast app, you can:\n                <ol>\n                  <li>\n                    Set a location, click button [Set Location] on top, you can\n                    also change location after set a location.\n                  </li>\n                  <li>\n                    See the 5-days forecast show in page after location set.\n                  </li>\n                  <li>\n                    See the 3-hourly forecast for that date by clicking the day.\n                  </li>\n                  <li>\n                    [NEW] Add auto refresh forecasts, and error catch and\n                    display\n                  </li>\n                </ol>\n              </div>\n            </div>\n          )}\n        </ul>\n\n        {this.state.showForecastDetailPage ? (\n          <ForecastDetailPage\n            date={detailForecast.day}\n            forecastDetails={detailForecast.hourly}\n            onClose={() => this.hideForecastDetailPage()}\n          />\n        ) : null}\n\n        {this.state.showSetLocationPage ? (\n          <SetLocationPage onClose={this.hideSetLocationPage} />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    location: state.location,\n    isFetching: state.forecasts.isFetching,\n    lastUpdated: state.forecasts.lastUpdated,\n    error: state.forecasts.error,\n    forecasts: state.forecasts.items,\n  }\n}\n\nexport default connect(mapStateToProps)(ForecastPage)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport WeatherApp from './components/App'\n\nrender(<WeatherApp />, document.getElementById('root'))\n"],"sourceRoot":""}